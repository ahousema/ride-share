/*
 * Ride Share API
 *
 * `API` for **COS 243** Semester Project
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VehicleTypeApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieve all vehicle types
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/vehicle-types")]
        [ValidateModelState]
        [SwaggerOperation("VehicleTypesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<VehicleType>), description: "OK")]
        public virtual IActionResult VehicleTypesGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<VehicleType>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"id\" : 42,\n  \"type\" : \"Pickup Truck\"\n}, {\n  \"id\" : 42,\n  \"type\" : \"Pickup Truck\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<VehicleType>>(exampleJson)
                        : default(List<VehicleType>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete an existing vehicle type
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Vehicle deleted</response>
        /// <response code="400">Can&#x27;t delete vehicle</response>
        [HttpDelete]
        [Route("/vehicle-types/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VehicleTypesIdDelete")]
        public virtual IActionResult VehicleTypesIdDelete([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update an existing vehicle type
        /// </summary>
        /// <param name="body">Updated vehicle type</param>
        /// <param name="id"></param>
        /// <response code="200">OK</response>
        /// <response code="400">No such vehicle ID</response>
        [HttpPatch]
        [Route("/vehicle-types/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VehicleTypesIdPatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(VehicleType), description: "OK")]
        public virtual IActionResult VehicleTypesIdPatch([FromBody]Body1 body, [FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VehicleType));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 42,\n  \"type\" : \"Pickup Truck\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<VehicleType>(exampleJson)
                        : default(VehicleType);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new vehicle type.
        /// </summary>
        /// <remarks>_Each_ vehicle in **Ride Share** has a &#x60;type&#x60;, making it easier for riders to identify the vehicle.</remarks>
        /// <param name="body"></param>
        /// <response code="200">New vehicle type created</response>
        [HttpPost]
        [Route("/vehicle-types")]
        [ValidateModelState]
        [SwaggerOperation("VehicleTypesPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VehicleType), description: "New vehicle type created")]
        public virtual IActionResult VehicleTypesPost([FromBody]Body body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VehicleType));
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 42,\n  \"type\" : \"Pickup Truck\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<VehicleType>(exampleJson)
                        : default(VehicleType);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
