/*
 * Ride Share API
 *
 * `API` for **COS 243** Semester Project
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    { 
        /// <summary>
        /// Get all users
        /// </summary>
        /// <response code="200">All users fetched successfully</response>
        [HttpGet]
        [Route("/users")]
        [ValidateModelState]
        [SwaggerOperation("UsersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "All users fetched successfully")]
        public virtual IActionResult UsersGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"id\" : 42,\n  \"firstName\" : \"Fred\",\n  \"lastName\" : \"Ziffle\",\n  \"email\" : \"fred@example.com\",\n  \"password\" : \"super-secret-thing\",\n  \"phone\" : \"765-555-1212\",\n  \"isAdmin\" : false\n}, {\n  \"id\" : 42,\n  \"firstName\" : \"Fred\",\n  \"lastName\" : \"Ziffle\",\n  \"email\" : \"fred@example.com\",\n  \"password\" : \"super-secret-thing\",\n  \"phone\" : \"765-555-1212\",\n  \"isAdmin\" : false\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get user by ID
        /// </summary>
        /// <param name="id">ID of user to fetch</param>
        /// <response code="200">Successfully retrieved</response>
        /// <response code="400">User not found</response>
        [HttpGet]
        [Route("/users/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UsersIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Successfully retrieved")]
        public virtual IActionResult UsersIdGet([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 42,\n  \"firstName\" : \"Fred\",\n  \"lastName\" : \"Ziffle\",\n  \"email\" : \"fred@example.com\",\n  \"password\" : \"super-secret-thing\",\n  \"phone\" : \"765-555-1212\",\n  \"isAdmin\" : false\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Created sucessfully</response>
        /// <response code="400">Not created</response>
        [HttpPost]
        [Route("/users")]
        [ValidateModelState]
        [SwaggerOperation("UsersPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(InlineResponse201), description: "Created sucessfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Not created")]
        public virtual IActionResult UsersPost([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(InlineResponse201));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"userId\" : 42\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse201>(exampleJson)
                        : default(InlineResponse201);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
